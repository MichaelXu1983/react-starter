{"version":3,"sources":["pages/Home/Message.module.less","assets/Empty/activity.svg","assets/Empty/message.svg","api/message.js","pages/Home/Message.js"],"names":["module","exports","home-container","content","separator-container","render-footer","listview-container","header","title","date","intro","link","__webpack_require__","p","_callee","params","regenerator_default","a","wrap","_context","prev","next","abrupt","request","concat","stringify","stop","_callee2","_context2","Message","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchProjectsList","hei","_x","_queryProjects","apply","arguments","queryProjects","objectSpread","page","state","projectsPageNo","defRequestPara","then","r","dataRows","reverse","projectsData","projectsRefreshing","toConsumableArray","setState","projectsDataSource","cloneWithRows","height","projectsIsLoading","projectsHasMore","length","catch","fetchUsersList","_x2","_queryUsers","queryUsers","usersPageNo","usersData","usersRefreshing","usersDataSource","usersIsLoading","usersHasMore","onRefreshProjects","onRefreshUsers","onEndReachedProjects","event","onEndReachedUsers","list_view_default","DataSource","rowHasChanged","row1","row2","document","documentElement","clientHeight","order_by","sort","per_page","simple","currentUser","ReactDOM","findDOMNode","lv","offsetTop","_this2","_this$state","usersTabs","allReadStatus","react_default","createElement","badge_default","projectsIndex","projectsRow","rowData","sectionID","rowID","obj","key","className","styles","name","dateFormat","Date","created_at","description","href","http_url_to_repo","usersIndex","usersRow","src","avatar_url","alt","website_url","tabs_default","tabs","initialPage","swipeable","usePaged","onChange","tab","index","console","log","onTabClick","ref","el","dataSource","renderFooter","rowIdentities","Empty","img","require","text","renderRow","renderSeparator","style","overflow","scrollRenderAheadDistance","pullToRefresh","pull_to_refresh_default","refreshing","onRefresh","onEndReached","onEndReachedThreshold","pageSize","PureComponent","withRouter","connect","user"],"mappings":"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","file":"static/js/15.c39ade9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home-container\":\"_26BQdbsDE9eiabXTBPIOxF\",\"content\":\"_3cHU6gjQnWuTPZwFIK08cW\",\"separator-container\":\"_2HX6LysIhJQ92zxQVrMYr2\",\"render-footer\":\"_3T6nfmXbfI4hd66uoqLF-v\",\"listview-container\":\"_2hP62yPb8nooqak7s2faxL\",\"header\":\"sGMfEvDPb620i5Xwlbiss\",\"title\":\"_1VB99vg_dsHs7jam1BQOag\",\"date\":\"_2o9XMHvXpCA-fWS93ZfKjt\",\"intro\":\"hdyUTCRAzMG9Fgpl1sWIV\",\"link\":\"_3yDStqwHcXNflpTstQvrLN\"};","module.exports = __webpack_public_path__ + \"static/media/activity.2770fb72.svg\";","module.exports = __webpack_public_path__ + \"static/media/message.527b40b2.svg\";","import { stringify } from 'qs'\nimport request from '@/utils/request'\n\n// 根据业务模块命名，和 /pages/* 一一对应\nexport async function queryProjects (params) {\n  return request(`/v4/projects?${stringify(params)}`)\n}\n\nexport async function queryUsers (params) {\n  return request(`/v4/users?${stringify(params)}`)\n}","import React, { PureComponent } from 'react'\nimport ReactDOM from 'react-dom'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { queryProjects, queryUsers } from '@/api/message'\nimport { ListView, PullToRefresh, Badge, Tabs } from 'antd-mobile'\nimport styles from './Message.module.less'\nimport Empty from '@/components/Empty'\nimport { dateFormat } from '@/utils/utils'\n\nclass Message extends PureComponent {\n  static propTypes = {\n    currentUser: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  }\n  constructor(props) {\n    // 构造方法\n    super(props) // 调用父类构造函数，返回子类实例\n\n    this.state = {\n      // 项目列表\n      projectsDataSource: new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2,\n      }),\n      projectsRefreshing: true,\n      projectsIsLoading: true,\n      projectsHasMore: true,\n      projectsPageNo: 1,\n      // 用户列表\n      usersDataSource: new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2,\n      }),\n      usersRefreshing: true,\n      usersIsLoading: true,\n      usersHasMore: false,\n      usersPageNo: 1,\n      height: document.documentElement.clientHeight,\n      // useBodyScroll: true,\n    }\n    this.projectsData = [] // 项目原始数据\n    this.usersData = [] // 用户原始数据\n    this.defRequestPara = {\n      order_by: 'created_at', // id, name, username, created_at, or updated_at fields. Default is id\n      sort: 'desc', // asc or desc order. Default is desc\n      per_page: 10, // defaults to 20\n      simple: typeof this.currentUser === 'undefined' ? true : false, // true 为公开项目\n    }\n  }\n  componentDidUpdate() {\n    // if (this.state.useBodyScroll) {\n    //   document.body.style.overflow = 'auto'\n    // } else {\n    //   document.body.style.overflow = 'hidden'\n    // }\n  }\n  componentDidMount() {\n    const hei = this.state.height - ReactDOM.findDOMNode(this.lv).offsetTop\n    this.fetchProjectsList(hei) // 发起项目列表获取\n    this.fetchUsersList(hei) // 发起用户列表获取\n  }\n\n  // 发起项目列表获取\n  fetchProjectsList = hei => {\n    const payload = {\n      page: this.state.projectsPageNo,\n      ...this.defRequestPara,\n    }\n    queryProjects(payload)\n      .then(r => {\n        const dataRows = r.reverse()\n        this.projectsData = this.state.projectsRefreshing\n          ? [...dataRows]\n          : [...this.projectsData, ...dataRows]\n        this.setState({\n          projectsDataSource: this.state.projectsDataSource.cloneWithRows(\n            this.projectsData\n          ),\n          height: hei,\n          projectsRefreshing: false,\n          projectsIsLoading: false,\n          projectsHasMore: r.length !== 0,\n          // projectsPageNo: r.data.pageNo,\n          // projectsHasMore: r.data.total > r.data.pageNo * r.data.limit,\n        })\n      })\n      .catch(() => {\n        this.setState({\n          projectsRefreshing: false,\n          projectsIsLoading: false,\n        })\n      })\n  }\n\n  // 发起用户列表获取\n  fetchUsersList = hei => {\n    const payload = {\n      page: this.state.usersPageNo,\n      ...this.defRequestPara,\n    }\n\n    queryUsers(payload)\n      .then(r => {\n        const dataRows = r.reverse()\n        this.usersData = this.state.usersRefreshing\n          ? [...dataRows]\n          : [...this.usersData, ...dataRows]\n        this.setState({\n          usersDataSource: this.state.usersDataSource.cloneWithRows(\n            this.usersData\n          ),\n          height: hei,\n          usersRefreshing: false,\n          usersIsLoading: false,\n          usersHasMore: r.length !== 0,\n          //   usersPageNo: r.data.pageNo,\n          //   usersHasMore: r.data.total > r.data.pageNo * r.data.limit,\n        })\n      })\n      .catch(() => {\n        this.setState({\n          usersRefreshing: false,\n          usersIsLoading: false,\n        })\n      })\n  }\n\n  // 项目列表刷新回调函数\n  onRefreshProjects = () => {\n    if (this.state.projectsIsLoading) {\n      return\n    }\n    this.setState(\n      {\n        projectsRefreshing: true,\n        projectsIsLoading: true,\n        projectsPageNo: 1,\n      },\n      () => {\n        this.fetchProjectsList(this.state.height)\n      }\n    )\n  }\n\n  // 用户列表刷新回调函数\n  onRefreshUsers = () => {\n    if (this.state.usersIsLoading) {\n      return\n    }\n    this.setState(\n      {\n        usersRefreshing: true,\n        usersIsLoading: true,\n        usersPageNo: 1,\n      },\n      () => {\n        this.fetchUsersList(this.state.height)\n      }\n    )\n  }\n\n  // 项目列表拉到底部回调函数\n  onEndReachedProjects = event => {\n    if (this.state.projectsIsLoading || !this.state.projectsHasMore) {\n      return\n    }\n    this.setState(\n      {\n        projectsIsLoading: true,\n        projectsRefreshing: false,\n        projectsPageNo: this.state.projectsPageNo + 1,\n      },\n      () => {\n        this.fetchProjectsList(this.state.height)\n      }\n    )\n  }\n\n  // 用户列表拉到底部回调函数\n  onEndReachedUsers = event => {\n    if (this.state.usersIsLoading || !this.state.usersHasMore) {\n      return\n    }\n    this.setState(\n      {\n        usersIsLoading: true,\n        usersRefreshing: false,\n        usersPageNo: this.state.usersPageNo + 1,\n      },\n      () => {\n        this.fetchUsersList(this.state.height)\n      }\n    )\n  }\n\n  render() {\n    const { projectsDataSource, usersDataSource, allReadStatus } = this.state\n    // 切换标签数据\n    const usersTabs = [\n      { title: <Badge>最新项目</Badge> },\n      { title: <Badge>最活跃用户</Badge> },\n    ]\n    // 项目列表渲染数据\n    let projectsIndex = this.projectsData.length - 1\n    const projectsRow = (rowData, sectionID, rowID) => {\n      if (projectsIndex < 0) {\n        projectsIndex = this.projectsData.length - 1\n      }\n      const obj = this.projectsData[projectsIndex--]\n      return (\n        <div key={rowID} className={styles['listview-container']}>\n          <div className={styles['header']}>\n            <div className={styles['title']}>{obj.name}</div>\n            <div className={styles['date']}>\n              {dateFormat('yyyy-MM-dd', new Date(obj.created_at))}\n            </div>\n          </div>\n\n          <div className={styles['intro']}>{obj.description}</div>\n          <div className={styles['link']}>\n            <a href={obj.http_url_to_repo}>查看详情</a>\n          </div>\n        </div>\n      )\n    }\n    // 用户列表渲染数据\n    let usersIndex = this.usersData.length - 1\n    const usersRow = (rowData, sectionID, rowID) => {\n      if (usersIndex < 0) {\n        usersIndex = this.usersData.length - 1\n      }\n\n      const obj = this.usersData[usersIndex--]\n      return (\n        <div key={rowID} className={styles['listview-container']}>\n          <div className={styles['header']}>\n            <div className={styles['title']}>{obj.name}</div>\n            <div className={styles['date']}>{dateFormat('yyyy-MM-dd', new Date(obj.created_at))}</div>\n          </div>\n          <div className={styles['image']}>\n            <img src={obj.avatar_url} alt='' />\n          </div>\n          <div className={styles['link']}>\n            <a href={obj.website_url}>website</a>\n            {/* <span>查看详情</span> */}\n          </div>\n        </div>\n      )\n    }\n    // 项目列表分割组件\n    const projectsSeparator = (sectionID, rowID) => (\n      <div\n        key={`${sectionID}-${rowID}`}\n        className={styles['separator-container']}\n      />\n    )\n\n    // 用户列表分割组件\n    const usersSeparator = (sectionID, rowID) => (\n      <div\n        key={`${sectionID}-${rowID}`}\n        className={styles['separator-container']}\n      />\n    )\n    return (\n      <div className={styles['home-container']}>\n        <Tabs\n          tabs={usersTabs}\n          initialPage={0}\n          swipeable={false}\n          usePaged={false}\n          onChange={(tab, index) => {\n            console.log('onChange', index, tab)\n          }}\n          onTabClick={(tab, index) => {\n            console.log('onTabClick', index, tab)\n          }}\n          className={styles['tabs-container']}\n        >\n          <div className={styles['content']}>\n            <ListView\n              key={projectsRow.rowID}\n              ref={el => (this.lv = el)}\n              dataSource={this.state.projectsDataSource}\n              renderFooter={() => (\n                <div className={styles['render-footer']}>\n                  {projectsDataSource.rowIdentities.length !== 0 &&\n                  projectsDataSource.rowIdentities[0] !== '' ? (\n                    this.state.projectsIsLoading ? (\n                      '加载中...'\n                    ) : this.state.projectsHasMore ? (\n                      '下拉加载更多'\n                    ) : (\n                      '已加载完成'\n                    )\n                  ) : (\n                    <Empty\n                      img={\n                        <img\n                          src={require('@/assets/Empty/activity.svg')}\n                          alt='empty'\n                        />\n                      }\n                      text='暂无项目'\n                    />\n                  )}\n                </div>\n              )}\n              renderRow={projectsRow}\n              renderSeparator={projectsSeparator}\n              className={styles['projects-list']}\n              style={{\n                height: this.state.height,\n                overflow: 'auto',\n              }}\n              scrollRenderAheadDistance={500}\n              pullToRefresh={\n                <PullToRefresh\n                  refreshing={this.state.projectsRefreshing}\n                  onRefresh={this.onRefreshProjects}\n                />\n              }\n              onEndReached={this.onEndReachedProjects}\n              onEndReachedThreshold={10}\n              pageSize={5}\n            />\n          </div>\n\n          <div className={styles.content}>\n            <ListView\n              key={usersRow.rowID}\n              ref={el => (this.lv = el)}\n              dataSource={this.state.usersDataSource}\n              renderFooter={() => (\n                <div className={styles['render-footer']}>\n                  {usersDataSource.rowIdentities.length !== 0 &&\n                  usersDataSource.rowIdentities[0] !== '' ? (\n                    this.state.usersIsLoading ? (\n                      '加载中...'\n                    ) : this.state.usersHasMore ? (\n                      '下拉加载更多'\n                    ) : (\n                      '已加载完成'\n                    )\n                  ) : (\n                    <Empty\n                      img={\n                        <img\n                          src={require('@/assets/Empty/message.svg')}\n                          alt='empty'\n                        />\n                      }\n                      text='暂无用户'\n                    />\n                  )}\n                </div>\n              )}\n              renderRow={usersRow}\n              renderSeparator={usersSeparator}\n              className={styles['projects-list']}\n              style={{\n                height: this.state.height,\n                overflow: 'auto',\n              }}\n              scrollRenderAheadDistance={500}\n              pullToRefresh={\n                <PullToRefresh\n                  refreshing={this.state.usersRefreshing}\n                  onRefresh={this.onRefreshUsers}\n                />\n              }\n              onEndReached={this.onEndReachedUsers}\n              onEndReachedThreshold={10}\n              pageSize={5}\n            />\n          </div>\n        </Tabs>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const {\n    user: { currentUser },\n  } = state\n\n  return {\n    currentUser,\n  }\n}\nexport default withRouter(connect(mapStateToProps)(Message))\n"],"sourceRoot":""}